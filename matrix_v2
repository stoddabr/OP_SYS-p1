#brett stoddard
#4-10-2018

#!/bin/bash

#returns:
#   0-normal, sucessful operation
#   1-wrong number of arguments
#   2-unreadable file

#global variables
#arg1=$1
#arg2=$2
#arg3=$3

#operations
Dims(){
#calculate number of rows and cols from $1
    row=0   #number of rows
    inc=1   #used to count number of rows
    
    while read num
    do
        row=$(expr $row + $inc)
        oneline=$num    #this line will be used to count number of cols
    done < $arg2
    #echo "num row is: $row"
    col=0   #number of columns
    for i in $oneline   #count cols in oneline
    do
        col=$(( $col + $inc ))
    done
    echo -e "$row\t$col" #return "row   col"
}

Tran(){
    #record number of rows and columns
    touch temp_dims
    Dims > temp_dims
    row=$(cat temp_dims | cut -f 1 )
    col=$(cat temp_dims | cut -f 2 )
    
    #go through and save each column as a row then reconstruct
    temp_row='temp_row'
    temp_trans='temp_trans'
    #transpose of a matrix, $arg2
    touch $temp_trans
    touch $temp_row
    counter=1
    let final_count=$col+1
    while [ $counter -lt $final_count ]
    do
        #cut counter column out of arg2
        cut -f$counter $arg2 > $temp_row
        #old version not allowed #awk -v temp=$counter '{print $temp}' $arg2 > $temp_row
        #replace newline with tabs
        cat $temp_row | tr '\n' '\t' >> $temp_trans
        let counter=$counter+1 #increment by 1
        echo "" >> $temp_trans #add newline to seperate rows
    done

    cat $temp_trans
    rm temp_*
}

Mean(){
    #transpose first in order to allow for row instead of column operations
    #rows are simplier to operate on
    #transpose algorithem is copied from Tran 
    
    #go through and save each column as a row then reconstruct
    row=0
    col=0
    row=$(Dims | cut -f 1 )
    col=$(Dims | cut -f 2 )
    
    temp_row='temp_row'
    temp_trans='temp_trans'
    #transpose of a matrix, $arg2
    touch $temp_trans
    touch $temp_row
    counter=1
    let final_count=$col+1
    while [ $counter -lt $final_count ]
    do
        #cut counter column out of arg2
        cut -f$counter $arg2 > $temp_row
        #old version not allowed #awk -v temp=$counter '{print $temp}' $arg2 > $temp_row
        #replace newline with tabs
        cat $temp_row | tr '\n' '\t' >> $temp_trans
        let counter=$counter+1 #increment by 1
        echo "" >> $temp_trans #add newline to seperate rows
    done
    
    #calculate averages
    #create temporary file
    touch matrix_mean_temp
    sum=0
    while read num
    do
        for i in $num
        do
            sum=`expr $sum + $i`
        done
        #calculate average using given function
        #append to temp file
        echo -e "$(( ( sum + ( row / 2 ) * ( ( sum > 0 ) * 2 - 1 )) / row ))" >> matrix_mean_temp 
        sum=0 #reset sum
    done < $temp_trans
    tr "\n" "\t" < matrix_mean_temp #replace newline with tabs to create 1xX matrix
    echo -e "" #add extra endline on end
    
    rm matrix_mean_temp #remove temporary file
    rm temp_* #remove temporary files from transpose alg
}

Adds(){
    echo "Adds() called"
}

Mult(){
    echo "Mult() called"
}

#determine which function is being called
#and check number of arguments

if [[ $1 = dims ]]
then
    #confirm num arguments
    if [[ $# -ne 2 ]] && [[ $# -ne 1 ]]
    then
        echo "$#"
        echo "error-num arguments" 1>&2
        exit 1
    fi
    #check to see if stdin needs to be called
    if [[ $# = 1 ]]
    then 
        arg2="/dev/stdin"
        Dims
        exit 0 #exit program, return 0 because no input issues
    fi
    arg2=$2 
    #check to see if file is readable
    if [[ -r $arg2 ]]
    then
        #if correct num args & readable, call function
        Dims
        exit 0 #exit program, return 0 because no input issues
    else
        echo "file unreadable" 1>&2
        exit 2
    fi
#check for transpose
elif [[ $1 = transpose ]]
then
    #confirm num arguments
    if [[ $# -ne 2 ]] && [[ $# -ne 1 ]]
    then
        #if wrong number of arguments, return 1 and print to stderr 
        echo "error-num arguments" 1>&2
        exit 1
    fi
    #check to see if stdin needs to be called
    if [[ $# = 1 ]]
    then
        arg2='arg2'
        cat > 'arg2'
        Tran
        rm "$arg2"
        exit 0 #exit program, return 0 because no input issues
    fi
    arg2=$2 #set argument to to arg2 
    #check to see if file is readable
    if [[ -r $arg2 ]]
    then
        #if correct num args & readable, call function
        Tran
        exit 0 #exit program, return 0 because no input issues
    else
        echo "file unreadable" 1>&2
        exit 2
    fi
#check for mean
elif [[ $1 = mean ]]
then
    #confirm num arguments
    if [[ $# -ne 2 ]] && [[ $# -ne 1 ]]
    then
        #if wrong number of arguments, return 1 and print to stderr 
        echo "error-num arguments" 1>&2
        exit 1
    fi
    #check to see if stdin needs to be called
    if [[ $# = 1 ]]
    then
        arg2='arg2' #create file 'arg2' with "pointer" variable arg2
        cat > $arg2 #fill arg2 with stdin
        Mean
        rm $arg2 #remove the arg2 file
        exit 0 #exit program, return 0 because no input issues
    fi
    arg2=$2 
    #check to see if file is readable
    if [[ -r $arg2 ]]
    then
        #if correct num args & readable, call function
        Mean
        exit 0 #exit program, return 0 because no input issues
    else
        echo "file unreadable" 1>&2
        exit 2
    fi
#check for add operation call
elif [[ $1 = add ]]
then
    #confirm num arguments
    if [[ $# -ne 2 ]] && [[ $# -ne 3 ]]
    then
        #if wrong number of arguments, return 1 and print to stderr 
        echo "error-num arguments" 1>&2
        exit 1
    fi
    #check to see if stdin needs to be called
    if [[ $# = 2 ]]
    then 
        arg2='arg2' #create file 'arg2' with "pointer" variable arg2
        cat > $arg2 #fill arg2 with stdin
        Adds
        rm $arg2 #remove the arg2 file
        exit 0 #exit program, return 0 because no input issues
    fi
    arg2=$2 #if second argument is given, use it 
    #check to see if file is readable
    if [[ -r $arg2 ]]
    then
        #if correct num args & readable, call function
        Adds
        exit 0 #exit program, return 0 because no input issues
    else
        echo "file unreadable" 1>&2
        exit 2
    fi
#check for mult
elif [[ $1 = multiply ]]
then
    #confirm num arguments
    if [[ $# -ne 2 ]] && [[ $# -ne 3 ]]
    then
        #if wrong number of arguments, return 1 and print to stderr 
        echo "error-num arguments" 1>&2
        exit 1
    fi
    #check to see if stdin needs to be called
    if [[ $# = 2 ]]
    then 
        arg2='arg2' #create file 'arg2' with "pointer" variable arg2
        cat > $arg2 #fill arg2 with stdin
        Mult
        rm $arg2 #remove the arg2 file
        exit 0 #exit program, return 0 because no input issues
    fi
    arg2=$2 #if second argument is given, use it 
    #check to see if file is readable
    if [[ -r $arg2 ]]
    then
        #if correct num args & readable, call function
        Mult
        exit 0 #exit program, return 0 because no input issues
    else
        echo "file unreadable" 1>&2
        exit 2
    fi
fi

