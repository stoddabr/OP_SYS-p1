#brett stoddard
#4-10-2018

#!/bin/bash

#returns:
#   0-normal, sucessful operation
#   1-wrong number of arguments
#   2-unreadable file

#global variables
arg1=$1
arg2=$2
arg3=$3

#operations
Dims(){
#calculate number of rows and cols from $1
    row=0
    inc=1
    oneline=0

    #echo "file name: $arg2"
    #echo "first line: $arg1"
    while read num
    do
        row=$(expr $row + $inc)
        oneline=$num
    done < $arg2
    #echo "num row is: $row"
    col=0
    for i in $oneline
    do
        col=$(( $col + $inc ))
    done
    echo -e "$row\t$col"
}

Tran(){
    #go through and save each column as a row then reconstruct
    row=0
    col=0
    row=$(Dims | awk '{print $1}')
    col=$(Dims | awk '{print $2}')

    temp_row='temp_row'
    temp_trans='temp_trans'
    #transpose of a matrix, $arg2
    touch $temp_trans
    touch $temp_row
    counter=1
    let final_count=$col+1
    while [ $counter -lt $final_count ]
    do
        #cut counter column out of arg2
        #cut -f$counter $arg2 > $temp_row
        awk -v temp=$counter '{print $temp}' $arg2 > $temp_row
        #replace newline with tabs
        cat $temp_row | tr '\n' '\t' >> $temp_trans
        echo "" >> $temp_trans
        let counter=$counter+1 #increment by 1
    done

    cat $temp_trans
    rm temp_*
}

Mean(){
    #echo "Mean() called"
    #create temporary file
    touch matrix_mean_temp
    sum=0
    row=0
    while read num
    do
        for i in $num
        do
            row=`expr $row + 1`
            sum=`expr $sum + $i`
        done
        #echo -e "sum=$sum, num=$row" #used during testing
        #append to temp file
        echo -e "$(( ( sum + ( row / 2 ) * ( ( sum > 0 ) * 2 - 1 )) / row ))" >> matrix_mean_temp 
        sum=0 #reset sum
        row=0 #reset num
    done < $arg2
   
    tr "\n" "\t" < matrix_mean_temp
    echo -e ""
    rm matrix_mean_temp
}

Adds(){
    echo "Adds() called"
}

Mult(){
    echo "Mult() called"
}

#determine which function is being called
#and check number of arguments
std=/dev/stdin

if [[ $1 = dims ]]
then
    #confirm num arguments
    if [[ $# -ne 2 ]]
    then
        echo "error-num arguments" 1>&2
        exit 1
    fi
    #check to see if file is readable
    if [[ -r $2 ]]
    then 
        #if correct num args & readable, call function
        Dims
    else
        echo "file unreadable" 1>&2
        exit 2
    fi
#check for transpose
elif [[ $1 = transpose ]]
then
    Tran
#check for mean
elif [[ $1 = mean ]]
then
    if [[ $# -ne 2 ]]
    then
        echo "error-num arguments" 1>&2
        exit 1
    fi
    if [[ -r $2 ]]
    then 
        #if correct num args & readable, call function
        Mean
    else
        echo "file unreadable" 1>&2
        exit 2
    fi
#check for add
elif [[ $1 = add ]]
then
    Adds
#check for mult
elif [[ $1 = multiply ]]
then
    Mult
else
    echo "operation not recognized" 1>&2
    exit 3
fi

